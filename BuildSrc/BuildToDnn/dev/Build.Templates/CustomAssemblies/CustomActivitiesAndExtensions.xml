<?xml version="1.0" encoding="utf-8" ?>
<!--
  http://goo.gl/C0FeJv
  Jelle Druyts (http://jelle.druyts.net/) suggested me another solution to this know issue. It's a very interesting one as it also applies with third party assemblies (I.e.: assemblies in which you cannot add a Dummy Activity)
  You can check a file into the custom assemblies path called CustomActivitiesAndExtensions.xml that looks like this:

  The class name listed in the FulName attribute of the Extension element can be any class within the assembly that is public and has a parameter-less public constructor. This class will be constructed and loaded into memory so I’d recommend choosing a type whose constructor does as little as possible and has as few dependencies as possible (I typically look for Exception classes, data transfer objects, and the like).
  This will force the assemblies listed to be downloaded and loaded into the workflow host so they’re available to your workflow and custom assemblies.
-->
<Assemblies>
  <Assembly FileName="Build.Extensions.dll">
    <Extensions>
      <Extension FullName="Build.Extensions.Dummy.DummyCodeActivity" />
    </Extensions>
  </Assembly>
</Assemblies>
